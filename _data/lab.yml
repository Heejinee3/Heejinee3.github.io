# labs section data
# Programming Structure
# A Unix Shell, tags, desc
- name: Programming-Structure
  index: 0
  title: Programming Structure
  link: https://github.com/Heejinee3/Programming-Structure
  lab:
    - name: A-Word-Counting-Program
      title: A Word Counting Program
      purpose: [
          "The purpose of this lab is to learn or review the
          fundamentals of the C programming language, a portion of the 'decommenting' task of the C preprocessor, and how to use the
          GNU/Unix programming tools, especially bash, emacs, and gcc209.",
        ]
      desc: [
          "The task is to write a C program named wc209 that prints the number of
          lines, words, and characters in the input text fed from standard input to
          standard ouput. The program behaves similarly to Linux wc,
          but wc209 skips 'commented text'(e.g., text in /* ... */) and does not
          count such text in the output.",
        ]
      guide: https://github.com/Heejinee3/Programming-Structure/blob/master/A%20Word%20Counting%20Program/Guidelines.pdf
      link: https://github.com/Heejinee3/Programming-Structure/tree/master/A%20Word%20Counting%20Program
      code: https://github.com/Heejinee3/Programming-Structure/tree/master/A%20Word%20Counting%20Program/Code
      report:
      video:
    - name: String-Manipulation
      title: String Manipulation
      purpose: [
          "The purpose of this lab is to learn/review arrays
          and pointers in the C programming language, how to create and use
          stateless modules in C, the 'design by contract' style of
          programming, and how to use the GNU/UNIX programming tools,
          especially bash, emacs, gcc, and gdb.",
        ]
      desc: [
          "The task is to use C to create the 'Str' module that
          provides string manipulation functions. Specifically, design Str
          module so that each function behaves the same as described below.
          The task in this lab is twofold.",
          "[Part 1] Read the description of the basic string library functions
          carefully, and implement each function. The basic functions are most
          commonly used standard string functions. Each function should behave
          the same as its corresponding standard C function.",
          "[Part 2] Implement a simplified version of grep using Str functions. Read
          the provided file that contains skeleton code carefully, edit the file to
          make it process the required functionalities: find, replace, diff.",
        ]
      guide: https://github.com/Heejinee3/Programming-Structure/blob/master/String%20Manipulation/Guidelines.pdf
      link: https://github.com/Heejinee3/Programming-Structure/tree/master/String%20Manipulation
      code: https://github.com/Heejinee3/Programming-Structure/tree/master/String%20Manipulation/Code
      report:
      video:
    - name: Customer-Management-Table
      title: Customer Management Table
      purpose: [
          "The purpose of this lab is to learn how to implement
          common data structures in C and how to exploit them to achieve
          modularity in a real-world application. It also will give you the
          opportunity to gain more experience with the GNU/Linux programming
          tools, especially bash, emacs, and gdb.",
        ]
      desc: [
          "The task is to implement and improve the customer data management API
          using various data structures. The task in this lab is threefold:",
          "[Part 1] Implement an API library for the customer data
          management, using a dynamically resizable array.",
          "[Part 2] Implement the same API library using a hash table.",
          "[Part 3] Test the correctness of two libraries and measure the
          performance.",
        ]
      guide: https://github.com/Heejinee3/Programming-Structure/blob/master/Customer%20Management%20Table/Guidelines.pdf
      link: https://github.com/Heejinee3/Programming-Structure/tree/master/Customer%20Management%20Table
      code: https://github.com/Heejinee3/Programming-Structure/tree/master/Customer%20Management%20Table/Code
      report:
      video:
    - name: Assembly-Lanuage-Programming
      title: Assembly Lanuage Programming
      purpose: [
          "The purpose of this lab is to learn about computer
          architecture, assembly language programming, and testing strategies. It
          also will give you the opportunity to learn more about the GNU/Unix
          programming tools, especially bash, emacs, gcc209, and gdb for assembly
          language programs.",
        ]
      desc: [
          "A Desk Calculator Program in Assembly Language",
          "[Part 1] Implement basic functions of dc",
          "dc is a Unix-like operating system tool used for performing calculations. It reads numbers from standard input and
          uses command keys to display results on standard output. The implemented operations include printing (p),
          arithmetic operators (+, -, *, /, %, ^), and a terminating operator (q). The % operator calculates the remainder,
          and the ^ operator performs exponentiation. Negative exponents are not supported.",
          "[Part 2] Advanced functions",
          "dc tool for this lab requires the implementation of four operators: 'f' to print the stack contents in LIFO order,
          'c' to clear the stack, 'd' to duplicate the top entry, and 'r' to swap the top two values on the stack.
          These operators provide additional functionality for manipulating the input stack.",
        ]
      guide: https://github.com/Heejinee3/Programming-Structure/blob/master/Assembly%20Language%20Programming/Guidelines.pdf
      link: https://github.com/Heejinee3/Programming-Structure/tree/master/Assembly%20Language%20Programming
      code: https://github.com/Heejinee3/Programming-Structure/blob/master/Assembly%20Language%20Programming/mydc.s
      report:
      video:
    - name: A-Dynamic-Memory-Manager-Module
      title: A Dynamic Memory Manager Module
      purpose: [
          "The purpose of this assignment is to understand how dynamic
          memory management works in C. It also will give you more opportunity
          to use the GNU/Unix programming tools,
          especially bash, emacs, gcc209, gdb, and make.",
        ]
      desc: [
          "The task involves creating two additional implementations of the HeapMgr module.",
          "[Part 1] The first implementation, heapmgr1.c, aims to enhance efficiency by using a single doubly-linked list with headers and footers.
          However, it may have poor worst-case behavior.",
          "[Part 2] The second implementation, heapmgr2.c, improves on heapmgr1.c by using multiple doubly-linked lists or bins to address the worst-case behavior.
          Both implementations should validate function parameters, check invariants, and not rely on standard memory allocation functions.",
        ]
      guide: https://github.com/Heejinee3/Programming-Structure/blob/master/A%20Dynamic%20Memory%20Manager%20Module/Guidelines.pdf
      link: https://github.com/Heejinee3/Programming-Structure/tree/master/A%20Dynamic%20Memory%20Manager%20Module
      code: https://github.com/Heejinee3/Programming-Structure/tree/master/A%20Dynamic%20Memory%20Manager%20Module/Code
      report:
      video:
    - name: A-Unix-Shell
      title: A Unix Shell
      purpose: [
          "The purpose of this assignment is to help you learn about Unix
          processes, low-level input/output, and signals. It will also give you ample
          opportunity to define software modules; in that sense the assignment is
          a capstone for the course.",
        ]
      guide: https://github.com/Heejinee3/Programming-Structure/blob/master/A%20Unix%20Shell/Guidelines.pdf
      link: https://github.com/Heejinee3/Programming-Structure/tree/master/A%20Unix%20Shell
      code: https://github.com/Heejinee3/Programming-Structure/tree/master/A%20Unix%20Shell/Code
      report:
      video:
  img: /assets/lab/Programming-Structure.PNG
  desc: ""
  start_date: Mar 2018
  end_date: Jun 2018
  categories: [lab]
  tags: [C, Assembly]

  # Computer Architecture
- name: Computer-Architecture
  title: Computer Architecture
  link: https://github.com/Heejinee3/Computer-Architecture
  lab:
    - name: ALU
      title: ALU
      tags: [Verilog]
    - name: Vending-Machine
      title: Vending Machine
      tags: [Verilog]
    - name: Single-cycle-CPU
      title: Single-cycle CPU
      tags: [Verilog, RISC-V]
    - name: Multi-cycle-CPU
      title: Multi-cycle CPU
      tags: [Verilog, RISC-V]
    - name: Pipeline-CPU
      title: Pipeline CPU
      tags: [Verilog, RISC-V]
    - name: Cache
      title: Cache
      tags: [Verilog, RISC-V]
  preview_img: /assets/lab/Computer-Architecture/PreviewFigure.PNG
  img: /assets/lab/Computer-Architecture/MainFigure.PNG
  desc: "The objective of these labs is to understand the basic principles and hardware structures of computer systems including personal computers and workstations, and to learn how to design computers. This course covers data representation, CPU organization, instruction classification, language processing of assemblers and compilers, pipelining for performance enhancement, memory hierarchy, cache memory, and IO peripheral devices. In addition, high-performance computer systems are to be introduced."
  start_date: Sep 2019
  end_date: Dec 2019
  categories: [lab]
  tags: [Verilog, RISC-V]

  # Discrete Mathematics
- name: Discrete-Mathematics
  title: Discrete Mathematics
  link: https://github.com/Heejinee3/Discrete-Mathematics
  lab:
    - name: Lucas-Lehmer-Riesel-Primality-Test
      title: Lucas-Lehmer-Riesel Primality Test
  preview_img: /assets/lab/Discrete-Mathematics/PreviewFigure.jpg
  img: /assets/lab/Discrete-Mathematics/MainFigure.jpg
  desc: "The objective of these labs is to offer practical experience and application of fundamental mathematical concepts employed in computer science. The topics encompassed comprise proofs, relations, counting, graph theory, logic, automata, and formal languages. This practical approach aims to strengthen comprehension and foster problem-solving abilities within the realm of computer science."
  start_date: Mar 2020
  end_date: Jun 2020
  categories: [lab]

  # Machine Learning
- name: Machine-Learning
  index: 3
  title: Machine Learning
  link: https://github.com/Heejinee3/Machine-Learning
  lab: []
  img: /assets/lab/Machine-Learning.PNG
  desc: "The objective of these labs is to explore optimization and machine learning techniques for computer vision, specifically focusing on face recognition using subspace learning. Topics covered include PCA, discriminant analysis, kernel machines, object categorization, CNNs, GANs, activity recognition, regression forests, pose estimation, and object detection."
  start_date: Sep 2020
  end_date: Dec 2020
  categories: [lab]
  tags: []

  # Database
- name: Database
  title: Database
  link: https://github.com/Heejinee3/Database
  lab:
    - name: Lab1
      title: Lab1
      tags: [MySql, Ubuntu]
    - name: Lab2
      title: Lab2
      tags: [MySql, Google Cloud SQL]
    - name: Lab3
      title: Lab3
      tags: [MySql, Google Cloud SQL]
    - name: Lab4
      title: Lab4
      tags: [MySql, Google Cloud SQL]
    - name: Lab5
      title: Lab5
      tags:
        [
          MySql,
          Google Cloud SQL,
          Python,
          Google Cloud App Engine,
          Flask,
          SQLAlchemy,
        ]
    - name: Lab6
      title: Lab6
  preview_img: /assets/lab/Database/PreviewFigure.png
  img: /assets/lab/Database/MainFigure.png
  desc: "The objective of these labs is to gain a comprehensive understanding of database fundamentals and the implementation of data systems. These practical exercises cover the relational model, ER model, SQL, design theory, transactions, file and system structure, indexing, query processing, crash recovery, concurrency control, and transaction processing. Furthermore, emerging technologies like NoSQL and NewSQL systems will be explored."
  start_date: Mar 2021
  end_date: Jun 2021
  categories: [lab]
  tags:
    [
      MySql,
      Ubuntu,
      Google Cloud SQL,
      Python,
      Google Cloud App Engine,
      Flask,
      SQLAlchemy,
    ]

  # Bigdata Analytics
- name: Bigdata-Analytics
  title: Bigdata Analytics
  link: https://github.com/Heejinee3/Bigdata-Analytics
  lab:
    - name: Lab1
      title: Lab1
      tags: [Python, Spark]
    - name: Lab2
      title: Lab2
      tags: [Python, Spark]
    - name: Lab3
      title: Lab3
      tags: [Python, Spark]
    - name: Lab4
      title: Lab4
      tags: [Python, Spark]
    - name: Lab5
      title: Lab5
      tags: [Python]
  preview_img: /assets/lab/Bigdata-Analytics/PreviewFigure.jpg
  img: /assets/lab/Bigdata-Analytics/MainFigure.jpg
  desc: "The objective of these labs is to study data mining and machine learning algorithms for analyzing big data, utilizing Apache Spark as the primary tool. Topics covered include frequent itemsets, finding similar items, clustering, dimensionality reduction, recommendation systems, link analysis, data streams, large-scale machine learning, and Web advertising. The labs aim to develop a deep understanding of the algorithms and techniques involved in effectively mining and analyzing large datasets using Spark, and their applications in different domains."
  start_date: Sep 2021
  end_date: Dec 2021
  categories: [lab]
  tags: [Python, Spark]

  # Computer Vision
- name: Computer-Vision
  index: 6
  title: Computer Vision
  link: https://github.com/Heejinee3/Computer-Vision
  lab: []
  img: /assets/lab/Computer-Vision.PNG
  desc: "The objective of these labs is to provide a comprehensive introduction to low-level computer vision, covering foundational concepts such as camera image formation, geometric optics, feature detection, stereo matching, motion estimation, image recognition, scene understanding, and more. These labs aim to help develop an intuitive understanding and mathematical proficiency in various computer vision applications."
  start_date: Sep 2021
  end_date: Dec 2021
  categories: [lab]
  tags: []

  # Robocam
- name: Robocam
  title: Robocam
  link: https://github.com/Heejinee3/Robocam
  lab:
    - name: Cross-Development-Environment
      title: Cross Development Environment
      tags: [Ubuntu, Beaglebone Debian, NFS, Cross Development Environment, C]
    - name: Light-Control
      title: Light Control
      tags: [Ubuntu, Beaglebone Debian, NFS, Cross Development Environment, C]
    - name: Mobile-Robot-Control
      title: Mobile Robot Control
      tags: [Ubuntu, Beaglebone Debian, NFS, Cross Development Environment, C]
    - name: WiFi
      title: WiFi
      tags: [Ubuntu, Beaglebone Debian, NFS, Cross Development Environment, C]
    - name: WebCam-and-System-Integration
      title: WebCam and System Integration
      tags:
        [Ubuntu, Beaglebone Debian, NFS, Cross Development Environment, C, C++]
  preview_img: /assets/lab/Robocam/PreviewFigure.PNG
  img: /assets/lab/Robocam/MainFigure.PNG
  desc: "The objective of these labs is to design a RoboCam (Robotic Camera) as a prototypical embedded system, incorporating various components such as a cross-development system, light control, robot functionality, WiFi connectivity, a WebCam, and system integration. Additionally, the objective includes exploring possibilities for system enhancement."
  start_date: Sep 2021
  end_date: Dec 2021
  tags: [Ubuntu, Beaglebone Debian, NFS, Cross Development Environment, C, C++]
  categories: [lab]
